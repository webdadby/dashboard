-- Create timesheets table to store employee attendance data
CREATE TABLE IF NOT EXISTS public.timesheets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id BIGINT NOT NULL REFERENCES public.employees(id) ON DELETE CASCADE,
  work_date DATE NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('work', 'sick', 'unpaid', 'vacation')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(employee_id, work_date)
);

-- Add comments
COMMENT ON TABLE public.timesheets IS 'Stores employee attendance and time off data';
COMMENT ON COLUMN public.timesheets.employee_id IS 'Reference to the employee';
COMMENT ON COLUMN public.timesheets.work_date IS 'The date of the attendance record';
COMMENT ON COLUMN public.timesheets.status IS 'Attendance status: work, sick, unpaid, vacation';

-- Create index for faster lookups by date range
CREATE INDEX IF NOT EXISTS idx_timesheets_work_date ON public.timesheets(work_date);
CREATE INDEX IF NOT EXISTS idx_timesheets_employee_id ON public.timesheets(employee_id);

-- Add row-level security if needed
ALTER TABLE public.timesheets ENABLE ROW LEVEL SECURITY;

-- Create trigger to update updated_at column
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_timesheets_updated_at
BEFORE UPDATE ON public.timesheets
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();
