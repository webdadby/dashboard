'use client';

import { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Payroll, WorkNorm } from '@/lib/supabase';
import { PayrollFormValues, PayrollDialogProps } from './types';
import { formatCurrency, roundToTwoDecimals } from './utils';

export function PayrollDialog({
  open,
  onOpenChange,
  employee,
  payroll,
  workNorm,
  year,
  month,
  minSalary,
  incomeTaxRate,
  fsznRate,
  insuranceRate,
  benefitAmount,
  taxDeduction,
  onSave,
}: PayrollDialogProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  // Remove individual state setters since we'll calculate everything reactively
  const [calculatedValues, setCalculatedValues] = useState({
    salaryAccrued: 0,
    totalAccrued: 0,
    incomeTax: 0,
    pensionTax: 0,
    totalDeductions: 0,
    totalPayable: 0,
    payableWithoutSalary: 0,
    fsznTax: 0,
    insuranceTax: 0,
    totalEmployeeCost: 0,
    isTaxBenefitApplied: false
  });

  // Get employee's salary - use base_salary if set, otherwise calculate from rate and minSalary
  const fullSalary = employee.base_salary !== undefined ? employee.base_salary : (employee.rate * minSalary) || 0;
  
  // Calculate default advance payment as 40% of salary
  const defaultAdvancePayment = payroll?.advance_payment !== undefined ? payroll.advance_payment : Math.round(fullSalary * 0.4);
  
  // Initialize form with validation
  const form = useForm<PayrollFormValues>({
    resolver: zodResolver(
      z.object({
        worked_hours: z.preprocess(
          (val: unknown) => (val === '' ? 0 : Number(String(val).replace(',', '.'))),
          z.number().min(0, 'Значение должно быть положительным')
        ),
        bonus: z.preprocess(
          (val: unknown) => (val === '' ? 0 : Number(String(val).replace(',', '.'))),
          z.number().min(0, 'Значение должно быть положительным')
        ),
        extra_pay: z.preprocess(
          (val: unknown) => (val === '' ? 0 : Number(String(val).replace(',', '.'))),
          z.number().min(0, 'Значение должно быть положительным')
        ),
        advance_payment: z.preprocess(
          (val: unknown) => (val === '' ? 0 : Number(String(val).replace(',', '.'))),
          z.number().min(0, 'Значение должно быть положительным')
        ),
        other_deductions: z.preprocess(
          (val: unknown) => (val === '' ? 0 : Number(String(val).replace(',', '.'))),
          z.number().min(0, 'Значение должно быть положительным')
        ),
      })
    ),
    defaultValues: {
      worked_hours: payroll?.worked_hours !== undefined ? payroll.worked_hours : 0,
      bonus: payroll?.bonus !== undefined ? payroll.bonus : 0,
      extra_pay: payroll?.extra_pay !== undefined ? payroll.extra_pay : 0,
      advance_payment: payroll?.advance_payment !== undefined ? payroll.advance_payment : defaultAdvancePayment,
      other_deductions: payroll?.other_deductions !== undefined ? payroll.other_deductions : 0,
    },
  });
  
  // Обновляем значения формы при изменении payroll
  useEffect(() => {
    if (payroll) {
      form.reset({
        worked_hours: payroll.worked_hours !== undefined ? payroll.worked_hours : 0,
        bonus: payroll.bonus !== undefined ? payroll.bonus : 0,
        extra_pay: payroll.extra_pay !== undefined ? payroll.extra_pay : 0,
        advance_payment: payroll.advance_payment !== undefined ? payroll.advance_payment : defaultAdvancePayment,
        other_deductions: payroll.other_deductions !== undefined ? payroll.other_deductions : 0,
      });
      
      // Обновляем расчетные значения
      const salaryAccrued = calculateSalaryAccrued(payroll.worked_hours || 0);
      const totalAccrued = roundToTwoDecimals(
        salaryAccrued + (payroll.bonus || 0) + (payroll.extra_pay || 0)
      );
      const incomeTax = roundToTwoDecimals(totalAccrued * (incomeTaxRate / 100));
      const pensionTax = roundToTwoDecimals(totalAccrued * 0.01);
      const totalDeductions = roundToTwoDecimals(
        incomeTax + pensionTax + (payroll.other_deductions || 0)
      );
      const totalPayable = roundToTwoDecimals(totalAccrued - totalDeductions);
      const payableWithoutSalary = roundToTwoDecimals(totalPayable - (payroll.advance_payment || 0));
      const fsznTax = roundToTwoDecimals(totalAccrued * (fsznRate / 100));
      const insuranceTax = roundToTwoDecimals(totalAccrued * (insuranceRate / 100));
      const totalEmployeeCost = roundToTwoDecimals(
        totalPayable + fsznTax + insuranceTax
      );
      
      setCalculatedValues({
        salaryAccrued,
        totalAccrued,
        incomeTax,
        pensionTax,
        totalDeductions,
        totalPayable,
        payableWithoutSalary,
        fsznTax,
        insuranceTax,
        totalEmployeeCost
      });
    }
  }, [payroll, fsznRate, insuranceRate, incomeTaxRate]);

  // Calculate salary accrued based on worked hours and norm
  const calculateSalaryAccrued = (hours: number) => {
    if (!workNorm?.norm_hours || workNorm.norm_hours <= 0) return 0;
    const fullSalary = employee.base_salary !== undefined ? employee.base_salary : (employee.rate * minSalary);
    return (fullSalary / workNorm.norm_hours) * hours;
  };

  // Calculate income tax with tax benefit rule
  const calculateIncomeTax = (amount: number) => {
    // Apply tax benefit rule: if total accrued is less than benefit amount threshold,
    // subtract the tax deduction before calculating income tax
    let taxableAmount = amount;
    let isTaxBenefitApplied = false;
    
    if (amount < benefitAmount) {
      taxableAmount = Math.max(0, amount - taxDeduction);
      isTaxBenefitApplied = true;
    }
    
    return {
      tax: taxableAmount * (incomeTaxRate / 100),
      isTaxBenefitApplied
    };
  };

  // Calculate pension tax (1% of total accrued)
  const calculatePensionTax = (amount: number) => amount * 0.01;

  // Calculate FSZN tax (employer tax, 34% of total accrued by default)
  const calculateFsznTax = (amount: number) => amount * (fsznRate / 100);
  
  // Calculate insurance tax (employer tax, 0.6% of total accrued by default)
  const calculateInsuranceTax = (amount: number) => amount * (insuranceRate / 100);

  // Watch form values and recalculate when they change
  useEffect(() => {
    const subscription = form.watch((value, { name }) => {
      // Only recalculate if relevant fields change
      if (name && !['worked_hours', 'bonus', 'extra_pay', 'advance_payment', 'other_deductions'].includes(name)) {
        return;
      }
      
      const formValues = form.getValues();
      const workedHours = Number(formValues.worked_hours || 0);
      const bonus = Number(formValues.bonus || 0);
      const extraPay = Number(formValues.extra_pay || 0);
      const advancePayment = Number(formValues.advance_payment || 0);
      const otherDeductions = Number(formValues.other_deductions || 0);
      
      const salaryAccrued = roundToTwoDecimals(calculateSalaryAccrued(workedHours));
      const totalAccrued = roundToTwoDecimals(salaryAccrued + bonus + extraPay);
      
      // Calculate income tax with tax benefit rule
      const { tax: incomeTaxAmount, isTaxBenefitApplied } = calculateIncomeTax(totalAccrued);
      const incomeTax = roundToTwoDecimals(incomeTaxAmount);
      
      const pensionTax = roundToTwoDecimals(calculatePensionTax(totalAccrued));
      const totalDeductions = roundToTwoDecimals(incomeTax + pensionTax + otherDeductions); // Exclude advance payment from deductions
      const totalPayable = roundToTwoDecimals(totalAccrued - totalDeductions);
      // К ВЫДАЧЕ БЕЗ АВАНСА: К ВЫДАЧЕ - АВАНС
      const payableWithoutSalary = roundToTwoDecimals(totalPayable - advancePayment);
      const fsznTax = roundToTwoDecimals(calculateFsznTax(totalAccrued));
      const insuranceTax = roundToTwoDecimals(calculateInsuranceTax(totalAccrued));
      const totalEmployeeCost = roundToTwoDecimals(totalPayable + fsznTax + insuranceTax);
      
      setCalculatedValues({
        salaryAccrued,
        totalAccrued,
        incomeTax,
        pensionTax,
        totalDeductions,
        totalPayable,
        payableWithoutSalary,
        fsznTax,
        insuranceTax,
        totalEmployeeCost
      });
    });
    
    // Initial calculation
    const formValues = form.getValues();
    const workedHours = Number(formValues.worked_hours || 0);
    const bonus = Number(formValues.bonus || 0);
    const extraPay = Number(formValues.extra_pay || 0);
    const advancePayment = Number(formValues.advance_payment || 0);
    const otherDeductions = Number(formValues.other_deductions || 0);
    
    const salaryAccrued = calculateSalaryAccrued(workedHours);
    const totalAccrued = salaryAccrued + bonus + extraPay;
    
    // Calculate income tax with tax benefit rule
    const { tax: incomeTaxAmount, isTaxBenefitApplied } = calculateIncomeTax(totalAccrued);
    const incomeTax = incomeTaxAmount;
    
    const pensionTax = calculatePensionTax(totalAccrued);
    const totalDeductions = incomeTax + pensionTax + otherDeductions; // Exclude advance payment from deductions
    const totalPayable = totalAccrued - totalDeductions;
    const payableWithoutSalary = bonus + extraPay - totalDeductions;
    const fsznTax = calculateFsznTax(totalAccrued);
    const insuranceTax = calculateInsuranceTax(totalAccrued);
    const totalEmployeeCost = totalPayable + fsznTax + insuranceTax;
    
    setCalculatedValues({
      salaryAccrued,
      totalAccrued,
      incomeTax,
      pensionTax,
      totalDeductions,
      totalPayable,
      payableWithoutSalary,
      fsznTax,
      insuranceTax,
      totalEmployeeCost
    });
    
    return () => subscription.unsubscribe();
  }, [form, workNorm, employee, minSalary, incomeTaxRate]);

  // Handle form submission
  const onSubmit = async (data: PayrollFormValues) => {
    setIsSubmitting(true);
    try {
      // Получаем оклад сотрудника
      const salary = employee.base_salary !== undefined ? employee.base_salary : (employee.rate * minSalary);
      
      // Создаем объект с всеми данными для сохранения
      const payrollData = {
        // Базовые данные
        employee_id: employee.id,
        year,
        month,
        
        // Данные из формы
        worked_hours: Number(data.worked_hours),
        bonus: Number(data.bonus || 0),
        extra_pay: Number(data.extra_pay || 0),
        advance_payment: Number(data.advance_payment || 0),
        other_deductions: Number(data.other_deductions || 0),
        
        // Рассчитанные значения
        salary: roundToTwoDecimals(salary), // Оклад
        salary_accrued: calculatedValues.salaryAccrued, // Начислено по окладу
        total_accrued: calculatedValues.totalAccrued, // Всего начислено
        income_tax: calculatedValues.incomeTax, // Подоходный налог
        pension_tax: calculatedValues.pensionTax, // Пенсионный налог
        total_deductions: calculatedValues.totalDeductions, // Всего удержано
        total_payable: calculatedValues.totalPayable, // К выдаче
        payable_without_salary: calculatedValues.payableWithoutSalary, // К выдаче без аванса
        fszn_tax: calculatedValues.fsznTax, // ФСЗН
        insurance_tax: calculatedValues.insuranceTax, // Страховой взнос
        total_employee_cost: calculatedValues.totalEmployeeCost // Общая стоимость сотрудника
      };
      
      // Выводим в консоль данные, которые будут сохранены
      console.log('Saving payroll data from dialog:', payrollData);
      
      await onSave(payrollData);
      onOpenChange(false);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Get the hourly rate based on full salary and work norm
  const getHourlyRate = () => {
    if (!workNorm?.norm_hours) return 0;
    return fullSalary / workNorm.norm_hours;
  };

  const renderInputField = (field: any, name: string, label: string, type: string = 'text') => (
    <FormItem>
      <FormLabel>{label}</FormLabel>
      <FormControl>
        <Input
          type={type}
          {...field}
          value={field.value === null || field.value === undefined ? '' : field.value}
          onChange={(e) => {
            const value = e.target.value === '' ? '' : e.target.value;
            field.onChange(value === '' ? null : Number(value));
          }}
        />
      </FormControl>
      <FormMessage />
    </FormItem>
  );

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[95vw] max-w-4xl max-h-[90vh] overflow-y-auto sm:max-h-[90vh] sm:overflow-y-auto">
        <DialogHeader className="sticky top-0 bg-background z-10 pb-2 border-b">
          <DialogTitle className="text-lg sm:text-xl">Начисление зарплаты</DialogTitle>
          <div className="text-sm text-muted-foreground">
            {employee.name} • {new Date(year, month - 1).toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}
          </div>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-2">
            {/* Salary Summary Card */}
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 p-3 sm:p-4 bg-muted/30 rounded-lg">
              <div className="space-y-1">
                <div className="text-sm font-medium text-muted-foreground">Оклад сотрудника</div>
                <div className="text-2xl font-bold text-primary">{formatCurrency(fullSalary)}</div>
                {employee.base_salary !== undefined ? (
                  <div className="text-sm text-muted-foreground">
                    {formatCurrency(calculatedValues.incomeTax)}
                  </div>
                ) : (
                  <div className="text-xs text-muted-foreground">
                    Рассчитано: {employee.rate} × {formatCurrency(minSalary)}
                  </div>
                )}
              </div>
              <div className="space-y-1">
                <div className="text-sm font-medium text-muted-foreground">Норма часов</div>
                <div className="text-2xl font-bold">{workNorm?.norm_hours || 'Не установлена'}</div>
                <div className="text-xs text-muted-foreground">
                  {workNorm?.norm_hours ? `${workNorm.norm_hours} ч/мес` : 'Установите норму часов'}
                </div>
              </div>
              <div className="space-y-1">
                <div className="text-sm font-medium text-muted-foreground">Ставка в час</div>
                <div className="text-xl font-semibold">
                  {workNorm?.norm_hours ? formatCurrency(fullSalary / workNorm.norm_hours) : '—'}
                </div>
                <div className="text-xs text-muted-foreground">
                  {workNorm?.norm_hours ? 'за 1 час' : 'Рассчитывается автоматически'}
                </div>
              </div>
            </div>
            
            {/* Input Fields */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
              <FormField
                control={form.control}
                name="worked_hours"
                render={({ field }) => renderInputField(field, 'worked_hours', 'Отработано часов', 'number')}
              />
              <FormField
                control={form.control}
                name="bonus"
                render={({ field }) => renderInputField(field, 'bonus', 'Премия', 'number')}
              />
              <FormField
                control={form.control}
                name="extra_pay"
                render={({ field }) => renderInputField(field, 'extra_pay', 'Доплата', 'number')}
              />
              <FormField
                control={form.control}
                name="advance_payment"
                render={({ field }) => renderInputField(field, 'advance_payment', 'Аванс', 'number')}
              />
              <div className="sm:col-span-2">
                <FormField
                  control={form.control}
                  name="other_deductions"
                  render={({ field }) => renderInputField(field, 'other_deductions', 'Прочие удержания', 'number')}
                />
              </div>
            </div>
            
            {/* Calculations Summary */}
            <div className="space-y-3">
              <div className="space-y-1.5">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Начислено по окладу:</span>
                  <span>{formatCurrency(calculatedValues.salaryAccrued)}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Премия:</span>
                  <span>{formatCurrency(Number(form.getValues().bonus || 0))}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Доплата:</span>
                  <span>{formatCurrency(Number(form.getValues().extra_pay || 0))}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Аванс:</span>
                  <span>{formatCurrency(Number(form.getValues().advance_payment || 0))}</span>
                </div>
                <div className="flex justify-between font-semibold pt-2 border-t">
                  <span>ВСЕГО НАЧИСЛЕНО:</span>
                  <span>{formatCurrency(calculatedValues.totalAccrued)}</span>
                </div>
              </div>
              
              <div className="space-y-1.5 pt-2">
                <div className="flex justify-between text-sm">
                  <div>
                    <span className="text-muted-foreground">Подоходный налог ({incomeTaxRate}%):</span>
                    {calculatedValues.isTaxBenefitApplied && (
                      <span className="ml-2 text-xs px-1.5 py-0.5 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-sm">
                        Применена льгота
                      </span>
                    )}
                  </div>
                  {formatCurrency(calculatedValues.incomeTax)}
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Пенсионный взнос (1%):</span>
                  <span>{formatCurrency(calculatedValues.pensionTax)}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Прочие удержания:</span>
                  <span>{formatCurrency(Number(form.getValues().other_deductions || 0))}</span>
                </div>
                <div className="flex justify-between font-semibold pt-2 border-t">
                  <span>ВСЕГО УДЕРЖАНО:</span>
                  <span>{formatCurrency(calculatedValues.totalDeductions)}</span>
                </div>
              </div>
              
              <div className="flex justify-between text-lg font-bold pt-3 border-t-2">
                <span>К ВЫДАЧЕ:</span>
                <span className="text-primary">{formatCurrency(calculatedValues.totalPayable)}</span>
              </div>
              
              <div className="flex justify-between font-semibold pt-2">
                <span>К ВЫДАЧЕ БЕЗ АВАНСА:</span>
                <span>{formatCurrency(calculatedValues.payableWithoutSalary)}</span>
              </div>
              
              <div className="space-y-1.5 pt-4 mt-2 border-t-2">
                <div className="text-sm font-medium mb-2">Налоги работодателя:</div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">ФСЗН ({fsznRate}%):</span>
                  <span>{formatCurrency(calculatedValues.fsznTax)}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Страховой взнос ({insuranceRate}%):</span>
                  <span>{formatCurrency(calculatedValues.insuranceTax)}</span>
                </div>
                <div className="flex justify-between font-semibold pt-2 border-t">
                  <span>Стоимость сотрудника:</span>
                  <span>{formatCurrency(calculatedValues.totalEmployeeCost)}</span>
                </div>
              </div>
            </div>

            {/* Footer Buttons */}
            <DialogFooter className="sticky bottom-0 bg-background pt-4 pb-1 -mx-6 px-6 border-t">
              <div className="flex w-full flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 space-y-2 sm:space-y-0">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => onOpenChange(false)}
                  disabled={isSubmitting}
                  className="w-full sm:w-auto"
                >
                  Отмена
                </Button>
                <Button 
                  type="submit" 
                  disabled={isSubmitting}
                  className="w-full sm:w-auto"
                >
                  {isSubmitting ? 'Сохранение...' : 'Сохранить'}
                </Button>
              </div>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
